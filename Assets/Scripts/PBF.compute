#define MAX_THREAD_X 1024
#define DELTA_T  0.01667
#define INV_DELTA_T 60
#define PI 3.1415927

struct Neighbors {
    int nid[50];
};

RWStructuredBuffer<float3> gPosition;
RWStructuredBuffer<float3> gPredictionPosition;
RWStructuredBuffer<float3> gVelocity;
RWStructuredBuffer<float3> gWallsNormal;
RWStructuredBuffer<float3> gWallsPosition;
RWStructuredBuffer<Neighbors> gNeighbors;
RWStructuredBuffer<int> gNeighborCount;
RWStructuredBuffer<float> gLambda;

uniform uint gParticlesNumber;
uniform uint gBlockSize;
uniform float gRadius;
uniform uint gWallSize;
uniform int gMaxNeighborsCount;
uniform float gKernelRange;
uniform float gDensity;

float Poly6(float3 pDelta, float pRange) {
    float r2 = dot(pDelta, pDelta);
    if (pRange * pRange - r2 < 0) {
        return 0;
    }

    return 315.0f / 64 / PI / pow(pRange, 9) * pow(pRange * pRange - r2, 3);
}

float3 SpikyGradient(float3 pDelta, float pRange) {
    float r = length(pDelta);
    if (pRange < r) {
        return float3(0, 0, 0);
    }

    float cof = -45.0f / PI / pow(pRange, 6);
    return pow(pRange - r, 2) * cof * normalize(pDelta);
}

#pragma kernel Update
[numthreads(MAX_THREAD_X, 1, 1)]
void Update(uint3 pID : SV_DispatchThreadID) {
    // apply force
    {
        uint id = pID.x;
        while (id < gParticlesNumber) {
            gVelocity[id] += DELTA_T * float3(0, -9.8f, 0);
            gPredictionPosition[id] = gPosition[id] + DELTA_T * gVelocity[id];

            id += MAX_THREAD_X * gBlockSize;
        }
        AllMemoryBarrierWithGroupSync();
    }

    // find neighbors
    {
        uint id = pID.x;
        while (id < gParticlesNumber) {
            gNeighborCount[id] = 0;
            for (uint i = 0; i < gParticlesNumber; ++i) {
                if (i != id) {
                    float3 subVec = gPredictionPosition[i] - gPredictionPosition[id];
                    float dis2 = dot(subVec, subVec);
                    if (dis2 <= gKernelRange * gKernelRange) {
                        gNeighbors[id].nid[gNeighborCount[id]++] = i;
                        if (gNeighborCount[id] == gMaxNeighborsCount) {
                            break;
                        }
                    }
                }
            }

            id += MAX_THREAD_X * gBlockSize;
        }
        AllMemoryBarrierWithGroupSync();
    }

    for (int lp = 0; lp < 4; ++lp) {
        // calculate lambda
        {
            uint id = pID.x;
            while (id < gParticlesNumber) {
                float numerator = 0;
                float denomimator = 0;
                float3 selfGradient = float3(0, 0, 0);

                for (int i = 0; i < gNeighborCount[id]; ++i) {
                    int neighbor = gNeighbors[id].nid[i];
                    float3 selfPosition = gPredictionPosition[id];
                    float3 neighborPosition = gPredictionPosition[neighbor];
                    float3 sub = selfPosition - neighborPosition;

                    numerator += Poly6(sub, gKernelRange);
                    float3 nabla = SpikyGradient(sub, gKernelRange) / gDensity;
                    denomimator += dot(nabla, nabla);
                    selfGradient += nabla;
                }

                numerator = numerator / gDensity - 1;
                denomimator += dot(selfGradient, selfGradient);
                gLambda[id] = -numerator / (denomimator + 100);
                id += MAX_THREAD_X * gBlockSize;
            }

            AllMemoryBarrierWithGroupSync();
        }

        // update position
        {
            uint id = pID.x;
            while (id < gParticlesNumber) {
                float3 deltaPos = float3(0, 0, 0);
                for (int i = 0; i < gNeighborCount[id]; ++i) {
                    int neighbor = gNeighbors[id].nid[i];
                    float3 sub = gPredictionPosition[id] - gPredictionPosition[neighbor];

                    // float s = -0.001 * pow(Poly6(sub, gKernelRange) / Poly6Scale(0.1 * gKernelRange, gKernelRange), 4);
                    float3 gradient = SpikyGradient(sub, gKernelRange);
                    deltaPos += (gLambda[id] + gLambda[neighbor]) * gradient;
                }

                gPredictionPosition[id] += deltaPos / gDensity;
                id += MAX_THREAD_X * gBlockSize;
            }

            AllMemoryBarrierWithGroupSync();
        }

        // collision detection
        {
            uint id = pID.x;

            while (id < gParticlesNumber) {
                for (uint i = 0; i < gWallSize; ++i) {
                    float3 n = gWallsNormal[i];
                    float3 p = gWallsPosition[i];
                    float sdf = dot(gPredictionPosition[id] - p, n) - gRadius;
                    if (sdf < 0) {
                        gPredictionPosition[id] -= sdf * n;
                    }
                }

                id += MAX_THREAD_X * gBlockSize;
            }

            AllMemoryBarrierWithGroupSync();
        }
    }

    // update position and velocity
    {
        uint id = pID.x;
        while (id < gParticlesNumber) {
            gVelocity[id] = INV_DELTA_T * (gPredictionPosition[id] - gPosition[id]);
            gPosition[id] = gPredictionPosition[id];
            //TODO:

            id += MAX_THREAD_X * gBlockSize;
        }
    }
}